<?php
/**
 * @file
 * A light-weight responsive slideshow tool.
 */

define("FLEXSLIDER_COMPATIBLE_MAJOR_VERSION", '2');
define("FLEXSLIDER_DEBUG", config_get('flexslider.settings', 'debug'));
define('FLEXSLIDER_STORAGE_CUSTOM', 'custom');
define('FLEXSLIDER_STORAGE_DEFAULT', 'default');
define('FLEXSLIDER_STORAGE_OVERRIDDEN', 'overridden');

/**
 * Implements hook_config_info().
 */
function flexslider_config_info() {
  $prefixes['flexslider.optionset'] = array(
    'name_key' => 'name',
    'label_key' => 'title',
    'group' => t('FlexSlider Optionsets'),
  );
  $prefixes['flexslider.settings'] = array(
    'label' => t('Flexslider Settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_library_info().
 */
function flexslider_library_info() {
  $module_path = backdrop_get_path('module', 'flexslider');
  $library_path = $module_path . '/libraries/flexslider';

  $libraries['flexslider'] = array(
    'title' => t('FlexSlider'),
    'version' => '2.7.2',
    'js' => array(
      $library_path . '/jquery.flexslider-min.js' => array(
        'scope' => 'footer',
      ),
    ),
    'css' => array(
      $library_path . '/flexslider.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      $module_path . '/css/flexslider_img.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function flexslider_library_info_alter(&$libraries, $module) {
  // Enable debug mode.
  if (FLEXSLIDER_DEBUG) {
    if ($module == 'flexslider' and isset($libraries['flexslider'])) {
      $module_path = backdrop_get_path('module', 'flexslider');
      $library_path = $module_path . '/libraries/flexslider';
      $libraries['flexslider']['js'] = array(
        $library_path . '/jquery.flexslider.js' => array(
          'scope' => 'footer',
        ),
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function flexslider_permission() {
  return array(
    'administer flexslider' =>  array(
      'title' => t('Administer the FlexSlider module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function flexslider_menu() {
  $items = array();

  // Minor code reduction technique.
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer flexslider'),
    'file' => 'flexslider.admin.inc',
  );

  $items['admin/config/media/flexslider'] = array(
    'title' => 'FlexSlider',
    'description' => 'Flexslider Optionset List',
    'page callback' => 'flexslider_optionset_list',
  ) + $base;

  $items['admin/config/media/flexslider/advanced'] = array(
    'title' => 'Advanced settings',
    'description' => 'Configure the advanced flexslider module settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_form_settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  ) + $base;

  $items['admin/config/media/flexslider/list'] = array(
    'title' => 'Optionset List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/media/flexslider/add'] = array(
    'title' => 'Add Optionset',
    'description' => 'Add a FlexSlider Optionset',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_form_optionset_edit'),
    'type' => MENU_LOCAL_ACTION,
  ) + $base;

  $items['admin/config/media/flexslider/edit/%flexslider_optionset'] = array(
    'title' => 'Edit optionset',
    'description' => 'Edit a Flexslider optionset',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_form_optionset_edit', 5),
    'weight' => -10,
  ) + $base;

  $items['admin/config/media/flexslider/clone/%flexslider_optionset'] = array(
    'title' => 'Clone optionset',
    'description' => 'Clone a Flexslider optionset',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_clone_form', 5),
  ) + $base;

  $items['admin/config/media/flexslider/delete/%flexslider_optionset'] = array(
    'title' => 'Delete optionset',
    'description' => 'Delete a Flexslider optionset',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_optionset_form_delete', 5),
  ) + $base;

  $items['admin/config/media/flexslider/revert/%flexslider_optionset'] = array(
    'title' => 'Revert style',
    'description' => 'Revert an image style.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flexslider_optionset_form_delete', 5),
  ) + $base;

  return $items;
}

/**
 * Implements hook_theme().
 */
function flexslider_theme() {
  return array(
    // Flexslider container
    'flexslider' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'template' => 'templates/flexslider',
      'file' => 'flexslider.theme.inc',
    ),

    // Slide container
    'flexslider_list' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'flexslider.theme.inc',
    ),

    // Slide item
    'flexslider_list_item' => array(
      'variables' => array('item' => array(), 'settings' => array(), 'caption' => ''),
      'file' => 'flexslider.theme.inc',
    ),
  );
}

/*
 * This function loads the required JavaScripts and settings for a flexslider
 * instance.
 *
 * @param string $id [optional]
 *  ID Attribute for FlexSlider container
 * @param object|strong $optionset [optional]
 *  optionset to load or the machine name of an existing optionset
 */
function flexslider_add($id = NULL, $optionset = NULL) {
  // Check optionset value
  if (is_string($optionset)) {
    $name = $optionset;
    $optionset = flexslider_optionset_load($name);
    if (empty($optionset)) {
      watchdog('flexslider', 'Invalid optionset name supplied to flexslider_add: @name', array('@name' => $name), WATCHDOG_WARNING);
      return;
    }
  }

  // Static array to remember which scripts are already attached.
  // @todo not currently in use
  $cache = &backdrop_static(__FUNCTION__, array());

  // If the ID or optionset aren't set, it is assumed the settings will be set
  // manually via the calling module/theme
  if (!empty($optionset) && !in_array($optionset['name'], $cache)) {
    $cache[] = $optionset['name'];
    $js_setting['optionsets'] = array(
      $optionset['name'] => $optionset['options'],
    );
    backdrop_add_js(array('flexslider' => $js_setting), 'setting');
  }

  if (!empty($id)) {
    // JavaScript settings
    $js_settings = array(
      'instances' => array(
        $id => $optionset['name'],
      ),
    );
    // @todo add alter hook for optionset
    backdrop_add_js(array('flexslider' => $js_settings), 'setting');
  }
  // Load JavaScript
  backdrop_add_js(backdrop_get_path('module', 'flexslider') . '/js/flexslider.load.js', array('type' => 'file', 'scope' => 'footer'));
}

/**
 * Default settings for a newly created optionset
 *
 * @param string $key [optional]
 *  Get specific default value
 *
 * @see https://github.com/woothemes/FlexSlider/blob/master/README.mdown
 * @see https://github.com/woothemes/FlexSlider/wiki/FlexSlider-Properties
 */
function _flexslider_optionset_defaults($key = NULL) {

  // We add typecasts to ensure the variables get json encoded properly

  $defaults = array(
    // v2.x options

    //{NEW} String: Prefix string attached to the class of every element generated by the plugin
    'namespace' => 'flex-',
    //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
    'selector' => '.slides > li',
    //String: Select your animation type, "fade" or "slide"
    'animation' => 'fade',
    //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
    'easing' => 'swing',
    //String: Select the sliding direction, "horizontal" or "vertical"
    'direction' => 'horizontal',
    //{NEW} Boolean: Reverse the animation direction
    'reverse' => FALSE,  // @todo verify data value
    //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
    'animationLoop' => TRUE,
    //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode
    'smoothHeight' => FALSE, // @todo verify data value
    //Integer: The slide that the slider should start on. Array notation (0 = first slide)
    'startAt' => 0,
    //Boolean: Animate slider automatically
    'slideshow' => TRUE,
    //Integer: Set the speed of the slideshow cycling, in milliseconds
    'slideshowSpeed' => 7000,
    //Integer: Set the speed of animations, in milliseconds
    'animationSpeed' => 600,
    //{NEW} Integer: Set an initialization delay, in milliseconds
    'initDelay' => 0,
    //Boolean: Randomize slide order
    'randomize' => FALSE,

    // Usability features

    //Boolean: Pause the slideshow when interacting with control elements, highly recommended
    'pauseOnAction' => TRUE,
    //Boolean: Pause the slideshow when hovering over slider, then resume when no longer
    'pauseOnHover' => FALSE,
    //{NEW} Boolean: Slider will use CSS3 transitions if available
    'useCSS' => TRUE,
    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
    'touch' => TRUE,
    //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid
    'video' => FALSE,

    // Primary Controls

    //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
    'controlNav' => TRUE,
    //Boolean: Create navigation for previous/next navigation? (true/false)
    'directionNav' => TRUE,
    //String: Set the text for the "previous" directionNav item
    'prevText' => t('Previous'),
    //String: Set the text for the "next" directionNav item
    'nextText' => t('Next'),

    // Secondary Navigation

    //Boolean: Allow slider navigating via keyboard left/right keys
    'keyboard' => TRUE,
    //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
    'multipleKeyboard' => FALSE,
    //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
    'mousewheel' => FALSE,
    //Boolean: Create pause/play dynamic element
    'pausePlay' => FALSE,
    //String: Set the text for the "pause" pausePlay item
    'pauseText' => t('Pause'),
    //String: Set the text for the "play" pausePlay item
    'playText' => t('Play'),

    // Special properties

    //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
    'controlsContainer' => '.flex-control-nav-container',
    //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
    'manualControls' => '',
    //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
    'sync' => '',
    //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider
    'asNavFor' => '',

    // Carousel Options

    //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
    'itemWidth' => 0,
    //{NEW} Integer: Margin between carousel items.
    'itemMargin' => 0,
    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
    'minItems' => 0,
    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
    'maxItems' => 0,
    //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
    'move' => 0,

    // Callback API
    /*
    //Callback: function(slider) - Fires when the slider loads the first slide
    'start' => '',
    //Callback: function(slider) - Fires asynchronously with each slider animation
    'before' => '',
    //Callback: function(slider) - Fires after each slider animation completes
    'after' => '',
    //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
    'end' => '',
    //{NEW} Callback: function(slider) - Fires after a slide is added
    'added' => '',
    //{NEW} Callback: function(slider) - Fires after a slide is removed
    'removed' => '',
    */

    // old v1.x options that should still be supported.
    'thumbCaptions' => FALSE,
    'thumbCaptionsBoth' => FALSE,
  );

  // Typecast the values
  _flexslider_typecast_optionset($defaults);

  // Return the specific item
  if (isset($key) and array_key_exists($key, $defaults)) {
    return $defaults[$key];
  }

  // Return all items
  return $defaults;
}

/**
 * Adds the typecasting to the values so that the generated
 * json array keeps the right values
 */
function _flexslider_typecast_optionset(&$options) {
  if (isset($options) && !empty($options)) {
    foreach ($options as $key => $value) {
      switch ($key) {
        case 'namespace':
        case 'selector':
        case 'easing':
        case 'direction':
        case 'controlsContainer':
        case 'sync':
        case 'asNavFor':
        case 'fade':
        case 'prevText':
        case 'nextText':
        case 'pauseText':
        case 'playText':
        case 'manualControls':
          $options[$key] = (string)$value;
          break;
        case 'startAt':
        case 'animationSpeed':
        case 'slideshowSpeed':
        case 'initDelay':
        case 'itemWidth':
        case 'itemMargin':
        case 'minItems':
        case 'maxItems':
        case 'move':
          $options[$key] = (int)$value;
          break;
        case 'controlNav':
          if ($value === 'thumbnails') {
            $options[$key] = (string)$value;
            break;
          }
        case 'reverse':
        case 'smoothHeight':
        case 'useCSS':
        case 'touch':
        case 'video':
        case 'keyboard':
        case 'multipleKeyboard':
        case 'mouseWheel':
        case 'slideshow':
        case 'directionNav':
        case 'pausePlay':
        case 'randomize':
        case 'thumbCaptions':
        case 'thumbCaptionsBoth':
        case 'animationLoop':
        case 'pauseOnAction':
        case 'pauseOnHover':
          $options[$key] = (bool)$value;
          break;
      }
    }
  }
}

/**
 * List of all easing methods available from jQuery Easing v1.3
 */
function _flexslider_jqeasing_options() {
  return array(
    "jswing" => "jswing",
    "def" => "def",
    "easeInQuad" => "easeInQuad",
    "easeOutQuad" => "easeOutQuad",
    "easeInOutQuad" => "easeInOutQuad",
    "easeInCubic" => "easeInCubic",
    "easeOutCubic" => "easeOutCubic",
    "easeInOutCubic" => "easeInOutCubic",
    "easeInQuart" => "easeInQuart",
    "easeOutQuart" => "easeOutQuart",
    "easeInOutQuart" => "easeInOutQuart",
    "easeInQuint" => "easeInQuint",
    "easeOutQuint" => "easeOutQuint",
    "easeInOutQuint" => "easeInOutQuint",
    "easeInSine" => "easeInSine",
    "easeOutSine" => "easeOutSine",
    "easeInOutSine" => "easeInOutSine",
    "easeInExpo" => "easeInExpo",
    "easeOutExpo" => "easeOutExpo",
    "easeInOutExpo" => "easeInOutExpo",
    "easeInCirc" => "easeInCirc",
    "easeOutCirc" => "easeOutCirc",
    "easeInOutCirc" => "easeInOutCirc",
    "easeInElastic" => "easeInElastic",
    "easeOutElastic" => "easeOutElastic",
    "easeInOutElastic" => "easeInOutElastic",
    "easeInBack" => "easeInBack",
    "easeOutBack" => "easeOutBack",
    "easeInOutBack" => "easeInOutBack",
    "easeInBounce" => "easeInBounce",
    "easeOutBounce" => "easeOutBounce",
    "easeInOutBounce" => "easeInOutBounce",
  );
}

/**
 * Checks whether an optionset with the given name already exists.
 *
 * @param $name
 *   The name of the optionset.
 *
 * @return boolean
 *   TRUE if it esists, FALSE if not.
 */
function flexslider_optionset_exists($name) {
  return !config('flexslider.optionset.' . $name)->isNew();
}

/******************************************************************************
 * Flexslider CRUD/R functions.
 ******************************************************************************/

/**
 * Create a new optionset array.
 *
 * @param $values
 *   Specified values for the optionset.
 *
 * @return array
 *   Optionset array.
 *
 * @see flexslider_optionset_save()
 */
function flexslider_optionset_create($values = array()) {
  // Stub the array for new custom optionsets.
  $optionset = array(
    'name' => '',
    'title' => '',
    'options' => array(),
  );

  // Assign specified values if provided.
  if (isset($values['name'])) {
    $optionset['name'] = $values['name'];
  }

  if (isset($values['title'])) {
    $optionset['title'] = $values['title'];
  }
  else if (isset($values['name'])) {
    $optionset['title'] = $values['name'];
  }

  $optionset_defaults = _flexslider_optionset_defaults();
  if (isset($values['options']) and is_array($values['options'])) {
    // Typecast all options before merge.
    _flexslider_typecast_optionset($values['options']);
    // Merge default settings with any given settings.
    $optionset['options'] = array_merge($optionset_defaults, $values['options']);
  }
  else {
    $optionset['options'] = $optionset_defaults;
  }

  // Determine the storage state.
  if (isset($values['module'])) {
    $optionset['module'] = $values['module'];
    if (isset($values['overridden'])) {
      $optionset['overridden'] = $values['overridden'];
      $optionset['storage'] = FLEXSLIDER_STORAGE_OVERRIDDEN;
    }
    else {
      $optionset['storage'] = FLEXSLIDER_STORAGE_DEFAULT;
    }
  }
  else {
    $optionset['storage'] = FLEXSLIDER_STORAGE_CUSTOM;
  }

  return $optionset;
}

/**
 * Read: Fetches the given optionset and creates the settings array.
 *
 * @param $name
 *   The name of the optionset.
 *
 * @return array|NULL
 *   The Optionset array, or NULL if no set could be found.
 *
 * @see flexslider_optionset_create().
 */
function flexslider_optionset_load($name) {
  $config = config('flexslider.optionset.' . $name);
  if ($config) {
    $options = $config->get(); // Get the whole optionset.
    $optionset = flexslider_optionset_create($options);
    return $optionset;
  }

  return NULL;
}

/**
 * Read: Fetches all optionsets.
 *
 * @return array
 *   An associative array of optionset arrays.
 *
 * @see flexslider_optionset_create().
 */
function flexslider_optionset_load_all() {
  $optionsets = array();
  $configs = config_get_names_with_prefix('flexslider.optionset.');
  foreach ($configs as $file) {
    $config = config($file)->get();
    $name = str_replace('flexslider.optionset.', '', $file);
    $optionsets[$name] = flexslider_optionset_create($config);
  }

  return $optionsets;
}

/**
 * Saves the given optionset to config.
 *
 * @param $optionset
 *   Array representing the Flexslider optionset.
 *
 * @return array|boolean
 *  Returns the newly saved object, FALSE otherwise.
 */
function flexslider_optionset_save($optionset) {
  // Check for an invalid list of options
  if (isset($optionset['options']) and !is_array($optionset['options'])) {
    return FALSE;
  }

  // If the title is missing, default to the name
  if (empty($optionset['title'])) {
    $optionset['title'] = $optionset['name'];
  }

  // Merge default settings with any given settings
  $optionset_defaults = _flexslider_optionset_defaults();
  $optionset['options'] = array_merge($optionset_defaults, $optionset['options']);

  // Set storage state. Copied from how image module handles state.
  if (isset($optionset['module'])) {
    $optionset['overridden'] = TRUE;
    $optionset['storage'] = isset($values['overridden']) ? FLEXSLIDER_STORAGE_OVERRIDDEN : FLEXSLIDER_STORAGE_DEFAULT;
  }
  else {
    $optionset['storage'] = FLEXSLIDER_STORAGE_CUSTOM;
  }

  // Load and save the (new or updated) config file.
  $config = config('flexslider.optionset.' . $optionset['name']);
  foreach ($optionset as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();

  // Return the object if the values were saved successfully.
  return $optionset;
}

/**
 * Deletes the given optionset from the database.
 *
 * @param array|string $optionset
 *  Optionset array or machine name
 */
function flexslider_optionset_delete($optionset) {
  if (isset($optionset['name'])) {
    $name = $optionset['name'];
  }
  else {
    $name = $optionset;
  }

  // Delete the config file.
  $config = config('flexslider.optionset.' . $name);
  $config->delete();
}

/**
 * Revert the changes made to a default optionset.
 *
 * @param style
 *   An image style array.
 *
 * @return
 *   Boolean TRUE if the operation succeeded.
 */
function flexslider_optionset_revert($optionset) {
  if (isset($optionset['name'])) {
    $name = $optionset['name'];
  }
  else {
    $name = $optionset;
  }

  if (isset($optionset['module'])) {
    $module = $optionset['module'];
  }
  else {
    $module = 'flexslider';
  }

  config('flexslider.optionset.' . $name)->delete();
  config_install_default_config($module, 'flexslider.optionset.' . $name);

  return TRUE;
}
