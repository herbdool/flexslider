<?php
/**
 * @file
 * Test cases for FlexSlider
 */

class FlexsliderTestCase extends BackdropWebTestCase {
  protected $admin_user;
  protected $any_user;

  function setUp() {
    parent::setUp('flexslider');

    // Create users
    $this->admin_user = $this->backdropCreateUser(array('administer flexslider'));
    $this->any_user = $this->backdropCreateuser(array('access administration pages'));
  }

  function testAdminAccess() {

    // Login as the admin user
    $this->backdropLogin($this->admin_user);

    // Load admin page
    $this->backdropGet('admin/config/media/flexslider');
    $this->assertResponse(200, t('Administrative permission allows access to administration page.'));

    // Logout as admin user
    $this->backdropLogout();

    // Login as any user
    $this->backdropLogin($this->any_user);

    // Attempt to load admin page
    $this->backdropGet('admin/config/media/flexslider');
    $this->assertResponse(403, t('Regular users do not have access to administrative pages.'));
  }

  function testOptionSetCrud() {
    // Login as the admin user
    $this->backdropLogin($this->admin_user);
    $testsets  = array('testset', 'testset2');

    foreach ($testsets as $name) {
      // Create a new optionset with default settings
      $optionset = flexslider_optionset_create(array('name' => $name));
      $this->assertTrue($optionset['name'] == $name, t('Optionset object created: @name', array('@name' => $optionset['name'])));
      $this->assertFalse(empty($optionset['options']), t('Create optionset works.'));

      // Save the optionset to config
      $optionset = flexslider_optionset_save($optionset);
      $this->assertFalse(FALSE === $optionset, t('Optionset saved to database.'));

      // Read the values from config
      $optionset = flexslider_optionset_load($name);

      $this->assertTrue((is_array($optionset) && !empty($optionset)), t('Loaded option set.'));
      $this->assertEqual($name, $optionset['name'], t('Loaded name matches: @name', array('@name' => $optionset['name'])));

      $default_optionset = flexslider_optionset_create();
      foreach ($default_optionset['options'] as $key => $value) {
        $this->assertEqual($value, $optionset['options'][$key], t('Option @option matches saved value.', array('@option' => $key)));
      }

    }

    // Load all optionsets
    $optionsets = flexslider_optionset_load_all();
    $this->assertTrue(is_array($optionsets), t('Array of optionsets loaded'));
    $this->assertTrue(count($optionsets) == 3, t('Proper number of optionsets loaded (two created, one default): 3'));

    // Ensure they all loaded correctly
    foreach ($optionsets as $optionset) {
      $this->assertTrue(isset($optionset['name']), t('Loaded optionsets have a defined machine name'));
      $this->assertTrue(isset($optionset['title']), t('Loaded optionsets have a defined human readable name (title)'));
      $this->assertTrue(isset($optionset['options']), t('Loaded optionsets have a defined array of options'));
    }

    // Update the optionset
    $test_options = _flexslider_test_options();
    $test_options = $test_options['valid'];

    // Load one of the test option sets
    $optionset = flexslider_optionset_load($testsets[0]);

    // Change the settings
    $optionset['options'] = array_merge($optionset['options'], $test_options['set2']);

    // Save the updated values
    $optionset = flexslider_optionset_save($optionset);
    $this->assertFalse(FALSE == $optionset, t('Saved optionset updates to config.'));

    // Load the values from config again
    $optionset = flexslider_optionset_load($testsets[0]);

    // Compare settings to the test options
    foreach ($test_options['set2'] as $key => $value) {
      $this->assertEqual($optionset['options'][$key], $value, t('Saved value matches set value: @key', array('@key' => $key)));
    }

    // Delete the optionset
    $this->assertTrue(flexslider_optionset_exists($optionset['name']), t('Optionset exists and is ready to be deleted.'));
    flexslider_optionset_delete($optionset['name']);

    // Ensure the delete is successful
    $this->assertFalse(flexslider_optionset_exists($optionset['name']), t('Optionset successfully deleted: @name', array('@name' => $optionset['name'])));
  }

  function testOptionSetForm() {

    // Login with admin user
    $this->backdropLogin($this->admin_user);

    // ------------ Test Option Set Add ------------ //
    // Load create form
    $this->backdropGet('admin/config/media/flexslider/add');
    $this->assertResponse(200, t('Administrative user can reach the "Add" form.'));

    // Save new optionset
    $optionset = array();
    $optionset['title'] = 'Testset';
    $optionset['name'] = 'testset';
    $this->backdropPost('admin/config/media/flexslider/add', $optionset, t('Save'));
    $this->assertResponse(200);
    $this->assertText('Testset configuration has been saved.', t('Successfully saved the new optionset "testset"'));

    // Attempt to save option set of the same name again
    $this->backdropPost('admin/config/media/flexslider/add', $optionset, t('Save'));
    $this->assertResponse(200);
    $this->assertText("The machine-readable name is already in use. It must be unique.", t("Blocked the creation of duplicate named optionset."));

    // ------------ Test Option Set Configure ------------ //
    // Attempt to save each option value
    $options = _flexslider_test_options();

    foreach ($options['valid'] as $testset) {
      $this->backdropPost('admin/config/media/flexslider/configure/default', $testset, t('Save'));
      $this->assertResponse(200);

      // Test saved values loaded into form
      $this->backdropGet('admin/config/media/flexslider/configure/default');
      $this->assertResponse(200, t('Default optionset reloaded.'));
      foreach ($testset as $key => $option) {
        $this->assertFieldByName($key, $option, t('Value for @key appears in form correctly.', array('@key' => $key)));
      }
    }

    // ------------ Test Option Set Delete ------------ //
    $testset = flexslider_optionset_load('testset');
    $name = $testset['name'];
    $title = check_plain($testset['title']);

    // Test the delete workflow
    $this->backdropGet("admin/config/media/flexslider/delete/$name");
    $this->assertResponse(200);
    $this->assertText("Are you sure you want to delete the optionset $title?", t('Delete confirmation form loaded.'));
    $this->backdropPost("admin/config/media/flexslider/delete/$name", '', 'Delete');
    $this->assertResponse(200);
    $this->assertText("Optionset $title has been deleted.", t('Deleted test set using form.'));
  }

}

/**
 * Test configuration options
 *
 * @return array
 *  Returns an array of options to test saving.
 */
function _flexslider_test_options() {
  // Valid option set data
  $valid = array(
    'set1' => _flexslider_optionset_defaults(),
    'set2' => array(
      'animation' => 'slide',
      'startAt' => 4,
      // @todo add more option tests
    ),
  );

  // Invalid edge cases
  $error = array();

  return array('valid' => $valid, 'error' => $error);
}
